{"ast":null,"code":"import create from 'zustand';\nimport { nanoid } from 'nanoid';\n\nconst getLocalStorage = key => JSON.parse(window.localStorage.getItem(key));\n\nconst setLocalStorage = (key, value) => window.localStorage.setItem(key, JSON.stringify(value));\n\nexport const useStore = create(set => ({\n  texture: 'dirt',\n  cubes: getLocalStorage('cubes') || [],\n  addCube: (x, y, z) => {\n    set(prev => ({\n      cubes: [...prev.cubes, {\n        key: nanoid(),\n        pos: [x, y, z],\n        texture: prev.texture\n      }]\n    }));\n  },\n  removeCube: (x, y, z) => {\n    set(prev => ({\n      cubes: prev.cubes.filter(cube => {\n        const [X, Y, Z] = cube.pos;\n        return X !== x || Y !== y || Z !== z;\n      })\n    }));\n  },\n  setTexture: texture => {\n    set(() => ({\n      texture\n    }));\n  },\n  saveWorld: () => {\n    set(prev => {\n      setLocalStorage('cubes', prev.cubes);\n    });\n  },\n  resetWorld: () => {\n    set(() => ({\n      cubes: []\n    }));\n  }\n}));","map":{"version":3,"names":["create","nanoid","getLocalStorage","key","JSON","parse","window","localStorage","getItem","setLocalStorage","value","setItem","stringify","useStore","set","texture","cubes","addCube","x","y","z","prev","pos","removeCube","filter","cube","X","Y","Z","setTexture","saveWorld","resetWorld"],"sources":["/home/kennedymungai/Documents/FrontEnd/InBrowserMinecraftClone/src/hooks/useStore.js"],"sourcesContent":["import create from 'zustand'\nimport { nanoid } from 'nanoid'\n\nconst getLocalStorage = (key) => JSON.parse(window.localStorage.getItem(key))\nconst setLocalStorage = (key, value) => window.localStorage.setItem(key, JSON.stringify(value))\n\n\nexport const useStore = create((set) => ({\n\ttexture: 'dirt',\n\tcubes: getLocalStorage('cubes') || [],\n\taddCube: (x, y, z) => {\n\t\tset((prev) => ({\n\t\t\tcubes: [\n\t\t\t\t...prev.cubes,\n\t\t\t\t{\n\t\t\t\t\tkey: nanoid(),\n\t\t\t\t\tpos: [x, y, z],\n\t\t\t\t\ttexture: prev.texture\n\t\t\t\t}\n\t\t\t]\n\t\t}))\n\t},\n\tremoveCube: (x, y, z) => {\n\t\tset((prev) => ({\n\t\t\tcubes: prev.cubes.filter(cube => {\n\t\t\t\tconst [X, Y, Z] = cube.pos\n\t\t\t\treturn X !== x || Y !== y || Z !== z\n\t\t\t})\n\n\t\t}))\n\t},\n\tsetTexture: (texture) => {\n\t\tset(() => ({\n\t\t\ttexture\n\t\t}))\n\t},\n\tsaveWorld: () => {\n\t\tset((prev) => {\n\t\t\tsetLocalStorage('cubes', prev.cubes)\n\t\t})\n\t},\n\tresetWorld: () => {\n\t\tset(() => ({\n\t\t\tcubes: []\n\t\t}))\n\t},\n}))"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,MAAMC,eAAe,GAAIC,GAAD,IAASC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAX,CAAjC;;AACA,MAAMM,eAAe,GAAG,CAACN,GAAD,EAAMO,KAAN,KAAgBJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BR,GAA5B,EAAiCC,IAAI,CAACQ,SAAL,CAAeF,KAAf,CAAjC,CAAxC;;AAGA,OAAO,MAAMG,QAAQ,GAAGb,MAAM,CAAEc,GAAD,KAAU;EACxCC,OAAO,EAAE,MAD+B;EAExCC,KAAK,EAAEd,eAAe,CAAC,OAAD,CAAf,IAA4B,EAFK;EAGxCe,OAAO,EAAE,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;IACrBN,GAAG,CAAEO,IAAD,KAAW;MACdL,KAAK,EAAE,CACN,GAAGK,IAAI,CAACL,KADF,EAEN;QACCb,GAAG,EAAEF,MAAM,EADZ;QAECqB,GAAG,EAAE,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAFN;QAGCL,OAAO,EAAEM,IAAI,CAACN;MAHf,CAFM;IADO,CAAX,CAAD,CAAH;EAUA,CAduC;EAexCQ,UAAU,EAAE,CAACL,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;IACxBN,GAAG,CAAEO,IAAD,KAAW;MACdL,KAAK,EAAEK,IAAI,CAACL,KAAL,CAAWQ,MAAX,CAAkBC,IAAI,IAAI;QAChC,MAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYH,IAAI,CAACH,GAAvB;QACA,OAAOI,CAAC,KAAKR,CAAN,IAAWS,CAAC,KAAKR,CAAjB,IAAsBS,CAAC,KAAKR,CAAnC;MACA,CAHM;IADO,CAAX,CAAD,CAAH;EAOA,CAvBuC;EAwBxCS,UAAU,EAAGd,OAAD,IAAa;IACxBD,GAAG,CAAC,OAAO;MACVC;IADU,CAAP,CAAD,CAAH;EAGA,CA5BuC;EA6BxCe,SAAS,EAAE,MAAM;IAChBhB,GAAG,CAAEO,IAAD,IAAU;MACbZ,eAAe,CAAC,OAAD,EAAUY,IAAI,CAACL,KAAf,CAAf;IACA,CAFE,CAAH;EAGA,CAjCuC;EAkCxCe,UAAU,EAAE,MAAM;IACjBjB,GAAG,CAAC,OAAO;MACVE,KAAK,EAAE;IADG,CAAP,CAAD,CAAH;EAGA;AAtCuC,CAAV,CAAD,CAAvB"},"metadata":{},"sourceType":"module"}